{"meta":{"title":"何琪旺的小库","subtitle":"Lucky forever","description":"我想一直游到海水变蓝","author":"何琪旺","url":"http://example.com","root":"/"},"pages":[{"title":"search","date":"2024-11-05T02:40:09.000Z","updated":"2024-11-05T02:40:09.852Z","comments":true,"path":"search/index.html","permalink":"http://example.com/search/index.html","excerpt":"","text":""},{"title":"404","date":"2024-11-05T02:40:20.000Z","updated":"2024-11-05T02:40:20.776Z","comments":true,"path":"404/index.html","permalink":"http://example.com/404/index.html","excerpt":"","text":""},{"title":"about","date":"2024-11-05T02:59:19.000Z","updated":"2024-11-05T02:59:19.963Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"咋回事","slug":"咋回事","date":"2024-11-05T05:26:43.000Z","updated":"2024-11-05T05:26:43.876Z","comments":true,"path":"2024/11/05/咋回事/","permalink":"http://example.com/2024/11/05/%E5%92%8B%E5%9B%9E%E4%BA%8B/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"帅照","slug":"帅照","date":"2024-11-04T02:04:18.000Z","updated":"2024-11-05T05:34:30.603Z","comments":true,"path":"2024/11/04/帅照/","permalink":"http://example.com/2024/11/04/%E5%B8%85%E7%85%A7/","excerpt":"","text":"我下辈子长这样 儿子 草包 龙坤 彭少 古希腊掌管c++算法的神——左鸿中","categories":[],"tags":[]},{"title":"test","slug":"test-1","date":"2024-11-04T01:47:09.000Z","updated":"2024-11-04T01:47:56.426Z","comments":true,"path":"2024/11/04/test-1/","permalink":"http://example.com/2024/11/04/test-1/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"军训场V题-双指针（Codeforces Round","slug":"军训场V题-双指针（Codeforces-Round-898-Div-4-F-Money-Trees-题解）","date":"2024-11-04T00:37:50.000Z","updated":"2024-11-04T01:54:29.406Z","comments":true,"path":"2024/11/04/军训场V题-双指针（Codeforces-Round-898-Div-4-F-Money-Trees-题解）/","permalink":"http://example.com/2024/11/04/%E5%86%9B%E8%AE%AD%E5%9C%BAV%E9%A2%98-%E5%8F%8C%E6%8C%87%E9%92%88%EF%BC%88Codeforces-Round-898-Div-4-F-Money-Trees-%E9%A2%98%E8%A7%A3%EF%BC%89/","excerpt":"","text":"1.自我介绍作为一个刚敲代码没有多久的的&#x3D;&#x3D;小蒟蒻&#x3D;&#x3D;，也是第一次发博客:joy:,有一些没说好的地方希望各位大佬谅解，如果存在错误的地方也希望大家可以指出，那么话不多说，&#x3D;&#x3D;action!&#x3D;&#x3D;:star2: 2.题目军训训练场 - Virtual Judge 原题目 3.分析题目根据观察题目我们不难发现Luca所能得到的子数组的数得满足&#x3D;&#x3D;两个条件&#x3D;&#x3D;： 1.高度h[i]能被下一个高度h[i]整除（最后一个数因为后面没有数了，得舍弃）。 2.子数组里的所有a[i]相加不能超过k。 这思路不就来了吗，对数组里的数进行两个条件的判断，如果满足条件子数组个数每次加一，否则子数组个数固定，下一个数返回循环重新判断，直接暴力做。(&#x3D;&#x3D;代码乱写的，但大概意思就是这样&#x3D;&#x3D;) 1234567891011if(h[j]%h[j+1]==0)&#123; //第一个条件 for(int k=i;k&lt;=j;k++)&#123; //i为子数组的起始下标 sum+=a[k]; if(sum&lt;=m)&#123; //第二个条件 cnt++; //条件满足后,子数组个数加一 &#125;else&#123; b[l]=cnt; //建立一个数组存储每一个子数组的个数 l++; cnt=0; //不要忘记个数清零 &#125;&#125; 当然我们写起来肯定比想起来要难，反正我是没暴力出来:joy_cat:,就算暴力出来也可能会超时，哎，只能去请教&#x3D;&#x3D;圈圈学长&#x3D;&#x3D;了！ 4.题目方法-双指针其实我们思考一下这题就类似于一种滑动窗口，就像一根辣条，我们每次切中间的一段吃，看那一段切的最长，我们要求的就是那一段的长度，这就需要动态处理区间-&#x3D;&#x3D;双指针&#x3D;&#x3D;！ 双指针算法双指针算法是一种常用的算法技巧，主要用于处理数组和链表等线性结构。它通过使用两个指针（索引位置）来遍历数据结构，从而达到减少时间复杂度的目的。双指针算法有多种变体，包括快慢指针、对撞指针和滑动窗口等。 下面是我从网上找的一段与我们题目类似&#x3D;&#x3D;快慢双指针&#x3D;&#x3D;的题目与代码： 123456789101112131415161718#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; string a; //定义一个字符串a getline(cin,a); //忽略空格读入所有字符 int n=a.size(); //n为a字符串的长度 for(int i=0;i&lt;n i++) //字符串下标都是从0开始 &#123; int j=i; //j为快字符，i为慢字符 while(a[j]!=&#x27; &#x27;) j++; //如果没读到空格，j继续向前移动 for(int k=i; k&lt;j;k++) cout&lt;&lt;a[k]; //把i到j中间的字符输出 cout&lt;&lt;endl; //记得换行 i=j; //循环体执行完后for()中的i才i++即，下一次开始时i就到了上一次空格(位置j)的下一位了 &#125; return 0;&#125; 我尽力了，如果大家还没搞懂的话可以双指针算法-CSDN博客看看。 5.题目讲解从题目着手，我们一个一个条件来。 &#x3D;&#x3D;1.高度h[i]能被下一个高度h[i]整除（最后一个数因为后面没有数了，得舍弃）。&#x3D;&#x3D; &#x3D;&#x3D;2.子数组里的所有a[i]相加不能超过k。&#x3D;&#x3D; 首先我们先判断第一个条件。 1while(j+1&lt;n&amp;&amp;h[j]%h[j+1]==0) j++; 我们可以用一个while循环判断数组有多少满足第一个条件的数，j为满足第一个条件的数的个数，至于j+1&lt;n是因为数组的长度是n并且数组最后一个数我们得舍弃。 其次，我们我们继续从j个数里面筛选出满足条件二的数的个数 123456789101112int sum=0; //sum为总数的大小for(int k=i,last=i;k&lt;=j;k++) //k为快指针下标，last为慢指针下标，i为起始下标（初始值），j为终止下标（结束值）&#123; sum+=a[k]; while(sum&gt;m) //如果我们加的数字超过了k值(我定义的m是题目中的k值) &#123; sum-=a[last]; //sum每次减去慢指针下标的数，直到总数小于k值为止 last++; //快指针向右移动，缩小慢指针与快指针的距离 &#125;ans=max(ans,k-last+1); //ans每次循环更新为最长子数组的长度,k-last+1就是两个指针之间的距离&#125;i=j; //因为前面的数已经判断过了，下次指针从j后面一个数开始判断 &#x3D;&#x3D;我从示例一中的第一个样例分析一下&#x3D;&#x3D; 123t:5 m:12a:3 2 4 1 8//注意看这一组h:4 4 2 4 1 我们最开始让i为0(第一个数4的下标为0，第二个数4为1，第三个数2为2，以此类推)，j为0（从0开始计数），前面的&#x3D;&#x3D;4,4,2&#x3D;&#x3D;是满足条件一的，所以j&#x3D;3. 1.第一次循环sum+a[0]&#x3D;3,不大于m，进入下一个循环。 快指针 3 2 4 慢指针 3 2 4 2.第二次循环sum+a[1]&#x3D;5,不大于m，进入下一个循环。 快指针 3 2 4 慢指针 3 2 4 3.第三次循环sum+a[2]&#x3D;9,不大于m,结束循环。 快指针 3 2 4 慢指针 3 2 4 &#x3D;&#x3D;ans&#x3D;2-0+1&#x3D;3&#x3D;&#x3D; 所以输出为3。 &#x3D;&#x3D;示例一中的第二个样例也差不多&#x3D;&#x3D; &#x3D;&#x3D;注意&#x3D;&#x3D;：但如果进入了while循环，慢指针就向右移动了，反正退出while循环后也是使其满足条件二，再进入max函数。 6.AC代码累死我了，给大家看看我的AC代码:joy: 1234567891011121314151617181920212223242526272829303132333435363738#include&lt;bits/stdc++.h&gt;#define IOS ios::sync_with_stdio(0), cin.tie(0), cout.tie(0)using namespace std;typedef long long ll;const int N=2e5+10;int a[N],h[N];int main()&#123; IOS; int t,n,m; cin&gt;&gt;t; while(t--)&#123; cin&gt;&gt;n&gt;&gt;m; int ans=0,cnt=0; for(int i=0;i&lt;n;i++)&#123; cin&gt;&gt;a[i]; &#125; for(int j=0;j&lt;n;j++)&#123; cin&gt;&gt;h[j]; &#125; for(int i=0;i&lt;n;i++)&#123; int j=i; while(j+1&lt;n&amp;&amp;h[j]%h[j+1]==0)j++; int sum=0; for(int k=i,last=i;k&lt;=j;k++)&#123; sum+=a[k]; while(sum&gt;m)&#123; sum-=a[last]; last++; &#125; ans=max(ans,k-last+1); &#125; i=j; &#125; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125; 哎，大差不差吧。 其实敲代码真的很累，但需要大家一起坚持，在此我很感谢圈圈学长，苏希无学姐，肖明阳学长，潜水大佬室友等人长期以来给予我的帮助，让我可以坚持下来，最后☆*: .｡. o(≧▽≦)o .｡.:*☆😘 ​","categories":[],"tags":[]},{"title":"Markdown基本语法","slug":"Markdown简要语法","date":"2024-11-03T15:49:18.000Z","updated":"2024-11-03T15:50:23.521Z","comments":true,"path":"2024/11/03/Markdown简要语法/","permalink":"http://example.com/2024/11/03/Markdown%E7%AE%80%E8%A6%81%E8%AF%AD%E6%B3%95/","excerpt":"","text":"Markdown基本语法标题## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 引用&gt; 这是一段引用 &gt; https://www.bilibili.com/video/BV1JA411h7Gw/?spm_id_from=333.337.search-card.all.click&amp;vd_source=1db826af20ac643dce96190fd8c9f0e3 bilibili net 有序列表：把大象关进冰箱需要3步： 打开冰箱 把大象放进冰箱 关上冰箱 无序列表把大象关进冰箱需要3步： - 打开冰箱 - 把大象放进冰箱 - 关上冰箱 任务列表今天学习任务列表: - [ ] 今天 - [x] 今天 - [x] 今天 代码块`&#96;&#96;c int main(){ ​ return 0; } `&#96;&#96; 数学公式$$\\frac{\\partial f}{\\partial x} &#x3D; 2\\sqrt{a}x$$ 行内数学公式$\\lceil \\frac{n}{2} \\rceil$ 表格|姓名|年龄|成绩| |:—|—:|:—:| |张三|19|19| |李四|19|19| 脚注一键三连^三连 横线-– 链接百度 引用链接百度 谷歌 链接设置到标题请参考标题 URLhttp://www.baidu.com 图片 如果是本地地址那么可以写本地图片的相对地址或者绝对地址 ![本地图片](c:\\Users\\Public\\Pictures\\Sample Pictures\\八仙花.jpg “百度搜索”) 本地地址未成功 斜体斜体 加粗加粗 行内代码行内代码 1printf() 下划线下划线 标准的表情符号:smile: &gt;https://unicode.org/emoji/charts/full-emoji-list.html 下标H2O 上标X^2^ 高亮文字&#x3D;&#x3D;这是一段高亮文字&#x3D;&#x3D; 视频","categories":[],"tags":[]},{"title":"我的第一篇博客","slug":"我的第一篇博客","date":"2024-11-03T14:32:04.000Z","updated":"2024-11-03T14:32:50.579Z","comments":true,"path":"2024/11/03/我的第一篇博客/","permalink":"http://example.com/2024/11/03/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"你好！","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2024-11-02T02:55:10.386Z","updated":"2024-11-02T02:55:10.386Z","comments":true,"path":"2024/11/02/hello-world/","permalink":"http://example.com/2024/11/02/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}